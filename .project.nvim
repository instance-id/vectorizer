local vim = vim
local Job = require('plenary.job')
local osEnv = {}

vim.g.title = false
vim.cmd('ProjectRoot')

for line in io.popen("set"):lines() do
  local envName = line:match("^[^=]+")
  osEnv[envName] = os.getenv(envName)
end

--| On Buffer Write ---------------
--|--------------------------------
local function RunJob()
  local cwd = vim.fn.getcwd()
  local file = vim.fn.expand('%:p')

  Job:new({
    command = 'vectorizer',
    args = {'-p', file, '--upload' },
    cwd = cwd,
    env = osEnv,
    on_exit = function(j, return_val)
      print(vim.inspect(return_val))
      print(vim.inspect(j:result()))
    end,
    on_stderr = function(_, output) print(output) end,
  }):start()
end

vim.api.nvim_create_autocmd("BufWritePost", {
  callback = function()
    RunJob()
  end,
})

--| On Project Load ---------------
--|--------------------------------
_G.project_load = function()
  local cwd = vim.fn.getcwd()

  Job:new({
    command = 'vectorizer',
    args = {'-p', cwd, '--upload' },
    cwd = cwd,
    env = osEnv,
    on_exit = function(j, return_val)
      print(vim.inspect(return_val))
      print(vim.inspect(j:result()))
    end,
    on_stderr = function(_, output) print(output) end,
  }):start()
end

--| On Build Hotkey ---------------
--|--------------------------------
-- Run shell command 'just build'
-- when :ProjectBuild is called
_G.project_build = function()
  local cwd = vim.fn.getcwd()
  vim.cmd('ProjectRoot')

  print("Building project...")

  Job:new({
    command = 'just',
    args = {'build', 'nvim' },
    cwd = cwd,
    env = osEnv,
    on_exit = function(j, return_val)
      print(vim.inspect(return_val))
      print(vim.inspect(j:result()))
    end,
    on_stderr = function(_, output) print(output) end,
  }):start()
end

--| On Run Hotkey -----------------
--|--------------------------------
_G.project_run = function()
  -- Nothing Currently
end

